name: CI

on:
  push:
    tags:
      - "v*.*.*"
jobs:
  once:
      name: Create GitHub release
      runs-on: ubuntu-latest
      outputs:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
      steps:
        - name: Create a release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            prerelease: false
  build:
    name: Build
    needs: once
    runs-on: ${{ matrix.os }}
    env:
        HL2SDKCS2: ${{ github.workspace }}/CS2Fixes/sdk
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
          - os: ubuntu-latest
            container: registry.gitlab.steamos.cloud/steamrt/sniper/sdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: CS2Fixes
          submodules: recursive

      - name: Checkout Metamod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: master
          path: mmsource-2.0
          submodules: recursive

      - name: Checkout AMBuild
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/ambuild
          path: ambuild

      - name: Install AMBuild
        run: |
          cd ambuild && python setup.py install && cd ..

      - name: Build
        working-directory: CS2Fixes
        shell: bash
        run: |
          mkdir build && cd build
          python ../configure.py --enable-optimize --symbol-files --sdks cs2
          ambuild
          if [ "$RUNNER_OS" == "Linux" ]; then
            zip -r release.zip package/*
            mkdir /root/release/
            mkdir /root/release/ubuntu-latest
            cp -r release.zip /root/release/ubuntu-latest/
          elif [ "$RUNNER_OS" == "Windows" ]; then
            tar -a -c -f release.zip package/*
            XCOPY /f /r /i /d /y release.zip /root/release/windows-latest/*
          fi
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}
        with:
          upload_url:  ${{ needs.once.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /root/release//${{ matrix.os }}/release.zip
          asset_name: CS2Fixes-${{ matrix.os }}.zip
          asset_content_type: application/zip
  